def checkForMalware(job, artifacts) {
    step([
        $class: 'CopyArtifact',
        filter: artifacts,
        fingerprintArtifacts: true,
        flatten: true,
        optional: true,
        projectName: job,
        selector: lastSuccessful()
    ])
    sh '''
        ls -r
    '''
    script {
        sh '''
            #!/bin/bash
            if [ -n "$VENV" ]; then
              export VENV=/home/tribler/venv
              . $VENV/bin/activate
              pip install requests
            fi

            echo Checking for malware executing: ${VIRUS_CHECK}
            python3 virustotal_check.py

            if [ -n "$ENABLE_VENV" ]; then
              deactivate
            fi
        '''
    }
}

def checkoutTriblerUtils() {
    checkout scm: [
        $class: 'GitSCM',
        branches: [[name: params.UTILS_GIT_BRANCH]],
        userRemoteConfigs: [[url: params.UTILS_GIT_REPOSITORY]],
        extensions: []
    ]
}
def copyLocalArtifacts(job, artifacts) {
    step([
        $class: 'CopyArtifact',
        filter: artifacts,
        fingerprintArtifacts: true,
        flatten: true,
        optional: true,
        projectName: job,
        selector: lastSuccessful()
    ])
}
def runVirusCheckOnWindows(){
    script{
        bat """
            echo Checking for malware executing: %VIRUS_CHECK%
            dir
            python3 virustotal_check.py
        """
    }
}
def runVirusCheckOnUnix(){
    script {
        sh '''
            #!/bin/bash
            if [ -n "$VENV" ]; then
              . $VENV/bin/activate
              pip install requests
            fi

            echo Checking for malware executing: ${VIRUS_CHECK}
            python3 virustotal_check.py

            if [ -n "$VENV" ]; then
              deactivate
            fi
        '''
    }
}

pipeline {
    agent none
    parameters {
        string(name: 'UTILS_GIT_REPOSITORY', defaultValue: 'https://github.com/Tribler/tribler-utils.git', description: 'Tribler utils git Repository')
        string(name: 'UTILS_GIT_BRANCH', defaultValue: 'master', description: 'Tribler utils git branch')
    }
    environment {
        VIRUSTOTAL_API_KEY = credentials('VIRUSTOTAL_API_KEY')
    }
    stages {
        stage('Check for malware') {
            parallel {
                stage('Ubuntu') {
                    agent { label 'builder_ubuntu' }
                    environment {
                        ARTIFACT_JOB_NAME = 'Tribler/Build/Build-Ubuntu'
                        INSTALLER_FILE_SUFFIX = '.deb'
                        VENV = '/home/tribler/venv'
                    }
                    steps {
                        cleanWs()
                        checkoutTriblerUtils()
                        copyLocalArtifacts(env.ARTIFACT_JOB_NAME, '**/debian/*.deb')
                        runVirusCheckOnUnix()
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: '*.analysis.json', fingerprint: true, allowEmptyArchive: true
                        }
                    }
                }

                stage('MacOS') {
                    agent { label 'builder_macos' }
                    environment {
                        ARTIFACT_JOB_NAME = 'Tribler/Build/Build-macOS'
                        INSTALLER_FILE_SUFFIX = '.dmg'
                    }
                    steps {
                        cleanWs()
                        checkoutTriblerUtils()
                        copyLocalArtifacts(env.ARTIFACT_JOB_NAME, 'tribler/dist/*.dmg')
                        runVirusCheckOnUnix()
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: '*.analysis.json', fingerprint: true, allowEmptyArchive: true
                        }
                    }
                }

                stage('Win64') {
                    agent { label 'builder_win64' }
                    environment {
                        ARTIFACT_JOB_NAME = 'Tribler/Build/Build-Windows'
                        INSTALLER_FILE_SUFFIX = 'x64.exe'
                        WORKSPACE_DIR = "${env.WORKSPACE}"
                    }
                    steps {
                        cleanWs()
                        checkoutTriblerUtils()
                        copyLocalArtifacts(env.ARTIFACT_JOB_NAME, 'tribler/dist/*.exe')
                        runVirusCheckOnWindows()
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: '*.analysis.json', fingerprint: true, allowEmptyArchive: true
                        }
                    }
                }

                stage('Win32') {
                    agent { label 'builder_win32' }
                    environment {
                        ARTIFACT_JOB_NAME = 'Tribler/Build/Build-Windows'
                        INSTALLER_FILE_SUFFIX = 'x86.exe'
                        WORKSPACE_DIR = "${env.WORKSPACE}"
                    }
                    steps {
                        cleanWs()
                        checkoutTriblerUtils()
                        copyLocalArtifacts(env.ARTIFACT_JOB_NAME, 'tribler/dist/*.exe')
                        runVirusCheckOnWindows()
                    }
                    post {
                        success {
                            archiveArtifacts artifacts: '*.analysis.json', fingerprint: true, allowEmptyArchive: true
                        }
                    }
                }

            }
        }
    }
}
